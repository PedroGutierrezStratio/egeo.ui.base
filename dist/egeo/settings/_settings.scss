// Settings
//
// The settings section includes a series of variables to configure our project.
// You could find two differente types of variables; the default ones which should
// be modified v√≠a [theming](section-9.html) and the immutable ones which are
// internally used by the framework and shouldn't be modified.
//
// ## Variables
//
// | var 														| default 											| value				| desc 																																									|
// |------------------------------------------------------------|---------------------------------------------------|-------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
// | <div class="egeo-u-nowrap">$egeo-namespace</div> 		| <span class="egeo-u-nowrap"><span class="tag tag--default">!default</span><span class="tag tag--danger">internal</span></span> 	| `egeo-`			| <div class="egeo-u-tx-align--left">A prefix included in all classes created by the UI Kit. <span class="text text--s3">This variable is used internally so change it could cause unexpected results.</span></div> |
// | <div class="egeo-u-nowrap">$egeo-nobem-namespace</div> 	| <span class="egeo-u-nowrap"><span class="tag tag--default">!default</span><span class="tag tag--danger">internal</span></span> 	| <span class="egeo-u-nowrap">`egeo-nobem-`</span>		| <div class="egeo-u-tx-align--left">A prefix included in all classes created by the UI Kit to be used in projects which are not using BEM like naming methodology. <span class="text text--s3">This variable is used internally so change it could cause unexpected results.</span></div> 	|
// | <div class="egeo-u-nowrap">$egeo-fontface-src</div>      | <span class="egeo-u-nowrap"><span class="tag tag--default">!default</span></span>    | 'assets/fonts'    | <div class="egeo-u-tx-align--left">A base url from which the @font-face directive will seek the font folders.</div>                                                         |
// | <div class="egeo-u-nowrap">$egeo-silent-classes</div>    | <span class="egeo-u-nowrap"><span class="tag tag--default">!default</span></span> 	| false           | <div class="egeo-u-tx-align--left">Active/deactivate the use of silent classes (view en explanation about silent classes below).</div> 	                                    |
// 
// ### Why a UI Kit namespace?
//
// The use of a namespace that prefix all classes exposed ensures that the classes of 
// the framework will have no collisions with the classes defined in the project the 
// framework will be imported on.
// 
// ### Why a non-BEM namespace?
//
// When you are building a project using 
// [BEM Methodology](http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/), 
// created by [Yandex](https://www.yandex.com/), you are building a CSS with
// flat [specificity](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity) 
// due to almost all selectors used are delimited to one class, that
// is equal to 10 points of [specificity](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity). 
// That means that if you load the files of the framework in the right order, 
// the classes always be respond as expected, overwritten the styles necessary, 
// for example, when you are using [utils](section-8.html).
//
// However, if you are not working with BEM or you are using external libraries not built
// with [BEM](http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/) 
// like [Bootstrap](http://getbootstrap.com/), [AngularUI](https://angular-ui.github.io/) or 
// [Foundation](http://foundation.zurb.com/), then you have to overwritte some styles
// using `!important` flag due to you have no way to know what specifity could have a selector.
// Even knowing it, you would have to create a selector specifically written for each
// selector you want to overwrite. A mess.
//
// For that, some classes and placeholders in the framework uses the non-BEM namespace to
// ensure that the `!important` flag is used and they can overwrite any class in the project.
//
// ### Silent Classes
//
// It is possible that, in any cases, you want to use some of the Egeo features
// but you don't want to import all the classes generated in your final CSS due to
// obvious performance reasons. If not used, shouldn't appear.
//
// All CSS classes in the Egeo UI Kit even in the Base Framework, are generated
// throughout mixins. This means that we can enable/disable the generation of the
// CSS class and import only the mixins to our code or import only the CSS classes
// we really need to use. This technique is called *Silent Classes*.
//
// By default, Egeo considers that you want to generate all CSS classes you import so
// the default value of `$egeo-silent-classes` is *false*. If you set it as *true*,
// by default, the system will only provide you the mixins and you have to set manually,
// class by class, if you want to generate the CSS class or not.
//
// To do it, all Egeo components include a variable called like the component that is
// a boolean. For example, the Button component that has the mixin `egeo-c-button`
// includes a variable called `$egeo-c-button` to indicate if Egeo should generate
// the CSS class or not. By default, this variable will have the value of 
// `$egeo-silent-classes`.
//
// Styleguide 2

$egeo-namespace: 'egeo-' !default;
$egeo-nobem-namespace: $egeo-namespace + '-nobem-' !default;
$egeo-fontface-src: 'assets/fonts' !default;
$egeo-silent-classes: false !default;
