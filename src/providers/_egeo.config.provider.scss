// EgeoConfig
//
// <span class="tag tag--type">@provider</span><span class="tag tag--warn">partially tested</span>
//
// The EgeoConfig provider expose a series of methods to
// configure how the application works, how it is installed
// and where the components should look for their templates
// or similar resources.
//
// ### EgeoPath
//
// <span class="tag tag--warn">partially tested</span>
//
// The EgeoPath is the path where the system have to seek for
// egeo components and resources. Where a component needs to
// obtain the template to work with, calls to the EgeoConfig
// provider to obtain the EgeoPath.
//
// The default value of the path is `public/js/egeo` and we
// can obtain it as it shown below. The code is from the 
// egeo-c-button directive. Take a look to the lines 5, 7 
// and 20:
//
// ```
//    angular
//        .module('egeo.buttons', [])
//        .directive('egeoCButton', egeoCButton);
//
//    egeoCButton.$inject = ['EgeoConfig'];
//
//    function egeoCButton(EgeoConfig) {
//        var directive = {
//            restrict: 'E',
//            replace: true,
//            scope: {
//                icon: '@',
//                label: '@',
//                modifier: '@',
//                rounded: '@',
//                small: '@',
//                tabindex: '@',
//                type: '@'
//            },
//            templateUrl: EgeoConfig.getEgeoPath() + '/components/button/components.button.tpl.html'
//        }
//
//        return directive;
//    } 
// ```
//
// Instead, if we want to configure the value to modify
// the default path, we need to do it as below. Lines 3 
// and 7 to 9:
//
// ```
//    angular
//        .module('myApp', [
//            'egeo.config',
//            'egeo.buttons'
//        ])
//
//        .config(function(EgeoConfigProvider){
//            EgeoConfigProvider.setEgeoPath('my/path');
//        });
// ```
//
// The tests covers the getEgeoPath function in the default case but not
// the manual configuration process for now.
//
// Styleguide 10.1
